<html>
  <head>
    <!-- ヘッダーのスクリプト群の読み込み -->
    <%- include('./ejs-components/header.ejs') %>
    <script>
      window.onload = (event) => {
        fetch(`<%= apiUrl %>exhibits/<%=exhibit.id%>/incrementViewsCount`, {
          method: 'PUT',
        })
          .then((res) => res.json())
          .then((res) => console.log(res));
      };
    </script>
  </head>
  <body>
    <!-- audio: trueを付与すると音声も取り入れられるけど、動作が重くなる問題があるので、コメントアウト -->
    <a-scene
      physics="debug : false;"
      renderer="colorManagement: true; antialias: true;"
      networked-scene="
        room: exhibit-<%=exhibit.id%>;
        debug: true;
        adapter: webrtc;
        username: <%=username%>;
        avatar: <%=avatar%>;
        serverURL: <%=wsServerUrl%>;
        audio: true;
      "
      cursor="rayOrigin: mouse"
    >
      <!-- camera -->
      <a-camera
        id="player"
        position="0 1.6 0"
        networked="template:#avatar-template;attachTemplateToLocal:false;"
        spawn-in-circle="radius:3"
        universal-controls
        kinematic-body
      >
        <!-- SELECTIVE INTERSECTIONS -->
        <a-cursor
          id="cursor-item"
          raycaster="objects: a-gltf-model"
          scale="0.1 0.1 0.1"
          geometry="primitive: ring; radiusInner: 0.1; radiusOuter: 0.15;"
          material="color: #ACACAC; shader: flat; opacity: 0.6"
        >
        </a-cursor>
        <a-sphere class="head" visible="false"></a-sphere>
      </a-camera>
      <!-- アバター -->
      <%- include('./ejs-components/ejs-assets/avatar.asset.ejs') %>
      <!-- 空 -->
      <%- include('./ejs-components/ejs-assets/sky.asset.ejs') %>
      <!-- ブース -->
      <%- include('./ejs-components/ejs-assets/booth.asset.ejs') %>
      <!-- 作品概要 -->
      <%-
      include('./ejs-components/ejs-assets/booth-exhibit-overview.asset.ejs') %>
      <!-- 作品紹介 -->
      <%-
      include('./ejs-components/ejs-assets/booth-presentation-image.asset.ejs')
      %>
      <!-- デモ動画、上のタイトル -->
      <%- include('./ejs-components/ejs-assets/booth-demo-video.asset.ejs', {
      exhibit }) %>
      <!-- 真ん中の作品 -->
      <%- include('./ejs-components/ejs-assets/booth-exhibit.asset.ejs') %>
      <!-- リアクションパネル -->
      <%- include('./ejs-components/ejs-assets/booth-reaction-panel.asset.ejs')
      %>
      <!-- いいね -->
      <%- include('./ejs-components/ejs-assets/booth-like.asset.ejs') %>
      <!-- 現在時間を表示 -->
      <%- include('./ejs-components/ejs-assets/booth-current-time.asset.ejs') %>
      <!-- 出口 -->
      <%- include('./ejs-components/ejs-assets/booth-exit.asset.ejs') %>

      <!-- ロビーに戻る用のボックスを出口アセットに被せる（visible: falseにして、隠している） -->

      <!-- 展示側Exit -->
      <%- include('./ejs-components/ejs-assets/lectern.asset.ejs') %>
    </a-scene>
  </body>

  <script type="application/javascript">
    // Your web app's Firebase configuration
    var firebaseConfig = {
      apiKey: 'AIzaSyCAqwr0I48EO5gTzgKQ-_no4vC_YFBa2Gw',
      authDomain: 'tulip-2875b.firebaseapp.com',
      projectId: 'tulip-2875b',
      storageBucket: 'tulip-2875b.appspot.com',
      messagingSenderId: '321966855152',
      appId: '1:321966855152:web:78d1875ff72476e895c335',
    };
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);

    function get_viewers_ip(json) {
      viewers_ip = json.ip;
      count_view(viewers_ip);
    }

    function count_view(viewers_ip) {
      var views;
      var ip_to_string = viewers_ip.toString();
      for (var i, i = 0; i < ip_to_string.length; i++) {
        ip_to_string = ip_to_string.replace('.', '-');
      }

      firebase
        .database()
        .ref()
        .child('page_views/' + ip_to_string)
        .set({
          viewers_ip: viewers_ip,
          timestamp: parseInt(new Date() / 1000),
        });

      firebase
        .database()
        .ref()
        .child('page_views')
        .on('value', function (snapshot) {
          views = snapshot.numChildren();
          document.getElementById('view_count_text').innerHTML = views;
        });

      //10分以上経ったIPアドレスを削除する
      var now = parseInt(new Date() / 1000);
      var cutoff = now - 10 * 60;
      var ref = firebase.database().ref('page_views');
      var old_ref = ref.orderByChild('timestamp').endAt(cutoff);
      old_ref.on('value', function (snapshot) {
        snapshot.forEach((childSnapshot) => {
          childSnapshot.ref.remove();
        });
      });
    }
  </script>

  <script
    type="application/javascript"
    src="https://api.ipify.org/?format=jsonp&callback=get_viewers_ip"
  ></script>
  <span id="view_count_text"></span></p>
</html>
